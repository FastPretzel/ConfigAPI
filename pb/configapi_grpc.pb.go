// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pb/configapi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Add(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigID, error)
	Get(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetUsingConf(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetAllServiceConf(ctx context.Context, in *Service, opts ...grpc.CallOption) (ConfigService_GetAllServiceConfClient, error)
	DeleteConf(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateConfig, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Add(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigID, error) {
	out := new(ConfigID)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Get(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetUsingConf(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/GetUsingConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetAllServiceConf(ctx context.Context, in *Service, opts ...grpc.CallOption) (ConfigService_GetAllServiceConfClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigService_ServiceDesc.Streams[0], "/pb.ConfigService/GetAllServiceConf", opts...)
	if err != nil {
		return nil, err
	}
	x := &configServiceGetAllServiceConfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigService_GetAllServiceConfClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type configServiceGetAllServiceConfClient struct {
	grpc.ClientStream
}

func (x *configServiceGetAllServiceConfClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configServiceClient) DeleteConf(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/DeleteConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Update(ctx context.Context, in *UpdateConfig, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ConfigService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	Add(context.Context, *Config) (*ConfigID, error)
	Get(context.Context, *ConfigID) (*ConfigResponse, error)
	GetUsingConf(context.Context, *Service) (*ConfigResponse, error)
	GetAllServiceConf(*Service, ConfigService_GetAllServiceConfServer) error
	DeleteConf(context.Context, *ConfigID) (*DeleteResponse, error)
	DeleteService(context.Context, *Service) (*DeleteResponse, error)
	Update(context.Context, *UpdateConfig) (*ConfigResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) Add(context.Context, *Config) (*ConfigID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedConfigServiceServer) Get(context.Context, *ConfigID) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfigServiceServer) GetUsingConf(context.Context, *Service) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsingConf not implemented")
}
func (UnimplementedConfigServiceServer) GetAllServiceConf(*Service, ConfigService_GetAllServiceConfServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllServiceConf not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConf(context.Context, *ConfigID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConf not implemented")
}
func (UnimplementedConfigServiceServer) DeleteService(context.Context, *Service) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedConfigServiceServer) Update(context.Context, *UpdateConfig) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Add(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Get(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetUsingConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetUsingConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/GetUsingConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetUsingConf(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetAllServiceConf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Service)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServiceServer).GetAllServiceConf(m, &configServiceGetAllServiceConfServer{stream})
}

type ConfigService_GetAllServiceConfServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type configServiceGetAllServiceConfServer struct {
	grpc.ServerStream
}

func (x *configServiceGetAllServiceConfServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigService_DeleteConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/DeleteConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConf(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Update(ctx, req.(*UpdateConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ConfigService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConfigService_Get_Handler,
		},
		{
			MethodName: "GetUsingConf",
			Handler:    _ConfigService_GetUsingConf_Handler,
		},
		{
			MethodName: "DeleteConf",
			Handler:    _ConfigService_DeleteConf_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ConfigService_DeleteService_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConfigService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllServiceConf",
			Handler:       _ConfigService_GetAllServiceConf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/configapi.proto",
}
